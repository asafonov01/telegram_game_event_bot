import random
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.dispatcher.filters.callback_data import CallbackData
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from bson import ObjectId
from pydantic import typing
from pymongo import ReturnDocument

from commands import Commands, exit_keyboard
from event_apis.puzzle_api import PuzzleApi
from settings import IS_PUZZLES_ENABLED, DEBUG, puzzles_collection, db, tokens_collection, \
    puzzles_autocollect_collection, LOCALES_DIR, I18N_DOMAIN
from states import BotStates
from aiogram.utils.i18n import gettext as _, lazy_gettext, I18n
from babel.support import LazyProxy


class CollectPuzzleRewardCallback(CallbackData, prefix='collect_puzzle_reward'):
    account_id: str
    item_id: int
    batch_size: int


class ChoosePuzzleRewardBatchSizeCallback(CallbackData, prefix='choose_puzzle_reward_batch_size'):
    account_id: str
    batch_size: int
    puzzle_left: int


def __(*args: typing.Any, **kwargs: typing.Any) -> LazyProxy:
    return lazy_gettext(*args, **kwargs, enable_cache=False)


class PuzzleCommands:
    RANDOM_PUZZLE_PACK = __("10 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞–∑–ª–æ–≤")
    BUY_PUZZLES = __("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ó–∞–≥–∞–¥–æ—á–Ω–æ–º—É –ü–∞–∑–ª—É")
    BUY_PUZZLE_PACK = __("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É")
    AUTO_COLLECT = __("–ê–≤—Ç–æ—Å–±–æ—Ä")


puzzles_router = Router()


@puzzles_router.message(F.text == Commands.EVENT_PUZZLES.name)
async def puzzles(message: Message, state: FSMContext, user: dict):
    if not IS_PUZZLES_ENABLED:
        return await message.reply(
            _('‚ùå –°–æ–±—ã—Ç–∏—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –∏–≥—Ä–µ. \n\n–ê–Ω–æ–Ω—Å –æ –∑–∞–ø—É—Å–∫–µ —É–∑–Ω–∞–π—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ @letsplaycastleclash'),
            reply_markup=ReplyKeyboardBuilder().button(text=Commands.EXIT.name).as_markup(resize_keyboard=True)
        )

    await state.set_state(BotStates.event_puzzles)
    await puzzles_section(message, state, user)


async def gen_puzzles_keyboard(user: dict):
    markup = ReplyKeyboardBuilder()
    markup.button(text=str(PuzzleCommands.AUTO_COLLECT))
    markup.button(text=str(PuzzleCommands.BUY_PUZZLES))
    for x in range(1, 10):
        if DEBUG:
            markup.button(text=_('{} {} —à—Ç').format(x, (
                await puzzles_collection.count_documents({f"puzzles.{x}": {"$gt": 1}, "is_used": False}))))
        else:
            markup.button(text=f'{x}')

    markup.row(KeyboardButton(text=str(PuzzleCommands.RANDOM_PUZZLE_PACK)))

    markup.row(KeyboardButton(text=str(Commands.EXIT.name)))

    markup.adjust(2, 3, 3, 3, 2)

    return markup.as_markup(resize_keyboard=True)


@puzzles_router.message(state=BotStates.event_puzzles)
async def puzzles_section(message: Message, state: FSMContext, user: dict):
    text = _(
        '–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª: <b>–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ø–∞–∑–ª</b>\n\n‚Ä¢ <a href="https://letsplaycastleclash.com/faq"><b>–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å FAQ</b></a> –ó–∞–≥–∞–¥–æ—á–Ω–æ–≥–æ –ø–∞–∑–ª–∞.\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É<b> ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–∑–ª–∞–º¬ª</b>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–∞–≤ <b>¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É¬ª</b>.\n‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∑–∞–Ω–æ–≤–æ –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ü–∞–∑–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.')

    await message.reply(text, reply_markup=await gen_puzzles_keyboard(user), disable_web_page_preview=True)
    await state.set_state(BotStates.event_puzzles_select_puzzle)


@puzzles_router.message(F.text == PuzzleCommands.BUY_PUZZLES, state=BotStates.event_puzzles_select_puzzle)
async def buy_puzzles(message: Message, user: dict, state: FSMContext):
    markup = ReplyKeyboardBuilder().button(text=PuzzleCommands.BUY_PUZZLE_PACK.value).button(
        text=Commands.EXIT.name).as_markup(resize_keyboard=True)

    await message.reply(text=_(
        '<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–∑–ª–∞–º</b> \n\n'
        '‚Ä¢ –ó–∞ 30 CastleCoin –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 30 –∫–æ–¥–æ–≤ –¥—Ä—É–≥–∞ –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –°–æ–±—ã—Ç–∏—è. \n'
        '‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.'),
        reply_markup=markup)


PRICE = 30


@puzzles_router.message(F.text == PuzzleCommands.BUY_PUZZLE_PACK, state=BotStates.event_puzzles_select_puzzle)
async def buy_puzzle_pack(message: Message, user: dict):
    user_coins = user.get("coins", 0)
    if user_coins < PRICE:
        return await message.reply(
            _('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CastleCoin\'–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ù—É–∂–Ω–æ {}, —É –≤–∞—Å –µ—Å—Ç—å: {}').format(PRICE, user_coins),
            reply_markup=ReplyKeyboardBuilder().button(text=str(Commands.DONATE.name)).button(
                text=Commands.EXIT.name).as_markup(resize_keyboard=True))

    await db.users.find_one_and_update(
        filter={"chat_id": user['chat_id']},
        update={"$inc": {"coins": -PRICE}})

    expires = datetime.now() + timedelta(days=7)

    await db.users.update_one(
        {"chat_id": user['chat_id']},
        {'$push': {
            f'ranks.1':
                {'id': 3, 'expires': expires}
        }
        })

    result_string = _(
        '‚úÖ –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ü–∞–∑–ª –∫—É–ø–ª–µ–Ω –¥–æ {} <a href="http://google.com/search?q=time+in+moscow+now"><b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è</b></a>. \n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòé ') \
        .format(expires.strftime("%d-%m-%Y %H:%M GMT+3"))

    await message.reply(result_string,
                        reply_markup=ReplyKeyboardBuilder().button(
                            text=Commands.EXIT.name).as_markup(resize_keyboard=True), disable_web_page_preview=True)


@puzzles_router.message(F.text == PuzzleCommands.AUTO_COLLECT, state=BotStates.event_puzzles_select_puzzle)
async def auto_collect_puzzles(message: Message, state: FSMContext, user: dict):
    keyboard = ReplyKeyboardBuilder() \
        .button(text=Commands.EXIT.name).as_markup(resize_keyboard=True, one_time_keyboard=True)

    await message.reply(
        _('–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª: <b>–ê–≤—Ç–æ—Å–±–æ—Ä –ø–∞–∑–ª–æ–≤</b> \n\n'
          # '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–≥–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n'
          '‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–≥–æ –ì–µ—Ä–æ—è –≤ –ê–ª—Ç–∞—Ä–µ –ì–µ—Ä–æ–µ–≤ >> –ø–æ–¥ –ì–µ—Ä–æ–µ–º —Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ ¬´–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è¬ª, –Ω–∞–∂–º–∏—Ç–µ.\n'
          '‚Ä¢ –í–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞. –ò–∑ —Å—Ç—Ä–æ–∫–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É >> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –±–æ—Ç—É. \n\n'
          '<b>‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ê–≤—Ç–æ—Å–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ 30 –∏ –±–æ–ª–µ–µ –ø–∞–∑–ª–æ–≤'),
        reply_markup=keyboard),
    await state.set_state(BotStates.event_puzzles_select_account_data)


@puzzles_router.message(state=BotStates.event_puzzles_select_account_data)
async def puzzles_account_receiver(message: Message, state: FSMContext, user: dict):
    await state.set_state(BotStates.event_puzzles_select_puzzle)

    puzzle_ranks = user['ranks'].get('1') or []

    total_puzzle_attempts = 0

    for rank in puzzle_ranks:
        if rank['id'] == 3 and rank['expires'] > datetime.now():
            total_puzzle_attempts += 30

    used_paid_attempts = 0
    if 'used_attempts' in user and 'puzzle' in user['used_attempts']:
        used_paid_attempts = user['used_attempts']['puzzle']

    if total_puzzle_attempts - used_paid_attempts < 30:
        return await message.reply(
            _('<b>‚ùå –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ü–∞–∑–ª –∑–∞ 30 CastleCoin.'),
            reply_markup=await gen_puzzles_keyboard(user=user))

    if 'uid=' not in message.text or 'signed_key=' not in message.text:
        return await message.reply(
            _('‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.</b> –ü—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: \n\n'
              '1. <b>signed_key</b> ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Å—ã–ª–∫–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª –∏/–∏–ª–∏ –≤–∞—à –∫–ª—é—á –∏—Å—Ç–µ–∫. –í–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å –∞–∫—Ç–∏–≤–Ω—ã–º signed_key. \n'
              '2. <b>uid</b> ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Å—ã–ª–∫–µ –∏/–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π IGG ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å IGG ID.'),
            reply_markup=exit_keyboard, disable_web_page_preview=True)

    uid = message.text[message.text.index('uid=') + len('uid='):]
    if '&' in uid:
        uid = uid[:uid.index('&')]

    if not uid.isdigit():
        await message.reply(
            _(
                f'‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> \n\n <b>uid</b> ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Å—ã–ª–∫–µ –∏/–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π IGG ID.',
            ),
            reply_markup=exit_keyboard)

    uid = int(uid)

    sign = message.text[message.text.index('signed_key=') + len('signed_key='):]
    if '&' in sign:
        sign = sign[:sign.index('&')]

    puzzles_api = PuzzleApi(sign, uid)

    try:
        pass
       # me = await puzzles_api.get_self()

    except Exception as e:
        return await message.reply(
            _('‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> \n\n'
              '<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n'
              '‚Äî Signed_key –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—å–º–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ –∏–≥—Ä—ã.'
              '‚Äî –°—Å—ã–ª–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–∏: <b>& =</b> \n'
              '‚Äî –í —Å—Å—ã–ª–∫–µ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞.\n'
              '‚Äî –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <b>signed_key</b> –∏–ª–∏ <b>uid</b>.'),
            reply_markup=exit_keyboard)

    link = await tokens_collection.find_one_and_update(
        {"uid": uid},
        {"$set": {
            'tg_id': message.from_user.id,
            'sign': sign,
        }},
        upsert=True,
        return_document=ReturnDocument.AFTER)

    if await puzzles_autocollect_collection.find_one({'account_id': link['_id']}):
        await message.reply(_('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∏–ª –≤—Å–µ 30 –ø–∞–∑–ª–æ–≤, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ê–∫—Ü–∏–∏.'))
        return

    await puzzles_autocollect_collection.update_one(
        {
            'account_id': link['_id'],
        }, {'$set': {}}, upsert=True
    )

    await db.users.update_one(
        {"chat_id": message.chat.id},
        {'$inc': {
            f'used_attempts.puzzle': 30,
        }
        })

    await message.reply(
        _('‚úÖ <b>–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.</b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 30 –ø–∞–∑–ª–æ–≤.'),
        reply_markup=exit_keyboard)


@puzzles_router.message(state=BotStates.event_puzzles_select_puzzle)
async def puzzles_giver(message: Message, state: FSMContext, user: dict):
    puzzle_ranks = user['ranks'].get('1') or []

    total_puzzle_attempts = 0

    for rank in puzzle_ranks:
        if rank['id'] == 3 and rank['expires'] > datetime.now():
            total_puzzle_attempts += 30

    used_paid_attempts = 0
    if 'used_attempts' in user and 'puzzle' in user['used_attempts']:
        used_paid_attempts = user['used_attempts']['puzzle']

    if message.text == PuzzleCommands.RANDOM_PUZZLE_PACK:
        if used_paid_attempts < total_puzzle_attempts:
            left_puzzles = total_puzzle_attempts - used_paid_attempts
            puzzles_to_give = min(left_puzzles, 10)
            errors_num = 0
            codes = []
            for i in range(puzzles_to_give):
                random_puzzle = random.randint(1, 9)
                puzzle = await puzzles_collection.find_one_and_update(
                    filter={"is_used": False, f"puzzles.{random_puzzle}": {"$gt": 1}},
                    update={"$set": {"is_used": True}})

                if puzzle is None:
                    codes.append(_('üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @CCletsplay_bot.'))
                    errors_num += 1
                else:
                    codes.append(puzzle["code"])

            await db.users.update_one(
                {"chat_id": message.chat.id},
                {'$inc': {
                    f'used_attempts.puzzle': puzzles_to_give - errors_num,
                }
                })

            await message.reply('\n'.join([f'<code>{x}</code>' for x in codes]),
                                reply_markup=await gen_puzzles_keyboard(user=user))
        else:
            return await message.reply(
                _('<b>‚ùå –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ü–∞–∑–ª –∑–∞ 30 CastleCoin.'),
                reply_markup=await gen_puzzles_keyboard(user=user))

    elif message.text and message.text[0].isdigit():
        if used_paid_attempts >= total_puzzle_attempts:
            return await message.reply(
                _('<b>‚ùå –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ó–∞–≥–∞–¥–æ—á–Ω—ã–π –ü–∞–∑–ª –∑–∞ 30 CastleCoin.'),
                reply_markup=await gen_puzzles_keyboard(user=user))

        puzzle_id = message.text[0]

        puzzle = await puzzles_collection.find_one_and_update(
            filter={"is_used": False, f"puzzles.{puzzle_id}": {"$gt": 1}},
            update={"$set": {"is_used": True}})

        if puzzle is None:
            return await message.reply(_('üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ –∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @CCletsplay_bot.'),
                                       reply_markup=await gen_puzzles_keyboard(user=user))
        else:
            await db.users.update_one(
                {"chat_id": message.chat.id},
                {'$inc': {
                    f'used_attempts.puzzle': 1
                }
                })

            return await message.reply(_('–í–∞—à –∫–æ–¥ –¥–ª—è {} –ø–∞–∑–ª–∞: <code>{}</code>').format(puzzle_id, puzzle["code"]),
                                       reply_markup=await gen_puzzles_keyboard(user=user))

    else:
        await message.reply(_('‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –±–æ—Ç–∞'),
                            reply_markup=await gen_puzzles_keyboard(user=user))


async def send_reward_message(tg_id: int, account_id: str, batch_size: int, puzzle_left: int, log: str):
    user_lang = (await db.aiogram_data.find_one({'chat': tg_id}))['data'].get('locale') or 'ru'

    _ = I18n(path=LOCALES_DIR, default_locale=user_lang, domain=I18N_DOMAIN).gettext

    items = (
        (37305, _('–ö–∞—Ä—Ç–∞ –°–æ–∑–≤–µ–∑–¥–∏–π *1'), 1),
        (37306, _('–ö–Ω–∏–≥–∞ –ù–∞–≤—ã–∫–∞ –°—É–ø–µ—Ä-–ü–∏—Ç–æ–º—Ü–∞*30'), 1),
        (37307, _('–°—É–º–∫–∞ –ü–∏—Ç–æ–º—Ü–µ–≤ IV*30'), 1),
        (37308, _('–Ø—â–∏–∫ —Å —á–∞—Å—Ç—è–º–∏ –û–±–ª–∏–∫–æ–≤ –ó–¥–∞–Ω–∏–π I*20'), 1),
        (37309, _('–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ü—ã–ª—å—Ü–∞*10'), 2),
        (37310, _('–°—É–Ω–¥—É–∫ –ó–∞–º–∫–∞ VI*4'), 2),
        (37311, _('–°—É–Ω–¥—É–∫ –ó–∞–º–∫–∞ V*4'), 2),
        (37312, _('–ú–µ—à–æ–∫ –≤—ã–±–æ—Ä–∞ –û–±–ª–∏–∫–∞ –≠–ø–∏—á. –ì–µ—Ä–æ—è I*5'), 5),
        (37313, _('–ú–µ—à–æ–∫ –≤—ã–±–æ—Ä–∞ –û—Å–∫–æ–ª–∫–æ–≤ –≠–ø–∏—á. –ì–µ—Ä–æ—è I*5'), 5)
    )

    keyboard = InlineKeyboardBuilder()

    x1_prefix, x10_prefix = '', ''
    if batch_size == 10:
        x10_prefix = '‚úÖ '
    else:
        x1_prefix = '‚úÖ '

    keyboard.button(text=f'{x1_prefix}X1', callback_data=ChoosePuzzleRewardBatchSizeCallback(account_id=account_id, batch_size=1, puzzle_left=puzzle_left))
    keyboard.button(text=f'{x10_prefix}X10', callback_data=ChoosePuzzleRewardBatchSizeCallback(account_id=account_id, batch_size=10, puzzle_left=puzzle_left))

    for (item_id, item_name, item_price) in items:
        keyboard.button(text='{} ‚Äì {}'.format(item_name, item_price),
                        callback_data=CollectPuzzleRewardCallback(item_id=item_id,
                                                                  account_id=account_id,
                                                                  batch_size=batch_size).pack())
    keyboard.adjust(2, 1)

    keyboard = keyboard.as_markup(resize_keyboard=True)

    account = await tokens_collection.find_one({"_id": ObjectId(account_id)})
    uid = account['uid']

    text = _(
        '‚úÖ –ü–∞–∑–ª—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ IGG ID {}.\n\n –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –Ω–∏–∂–µ. –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–∞–∑–ª–æ–≤: {}'
    ).format(uid, puzzle_left) + f'\n\nLOG: {log}'
    return text, keyboard


@puzzles_router.callback_query(ChoosePuzzleRewardBatchSizeCallback.filter(), state='*')
async def choose_puzzle_reward_batch_size(query: CallbackQuery, state: FSMContext, callback_data: ChoosePuzzleRewardBatchSizeCallback):
    await query.answer()
    text, keyboard = await send_reward_message(query.from_user.id, callback_data.account_id, callback_data.batch_size, callback_data.puzzle_left, '')
    await query.message.edit_reply_markup(keyboard)


@puzzles_router.callback_query(CollectPuzzleRewardCallback.filter(), state='*')
async def collect_reward(query: CallbackQuery, state: FSMContext, callback_data: CollectPuzzleRewardCallback):

    if 'LOG:' in query.message.text:
        old_log = query.message.text.split('LOG:')[1][1:]
    else:
        old_log = ''

    for i in range(callback_data.batch_size):
        account = await tokens_collection.find_one({"_id": ObjectId(callback_data.account_id)})
        uid = account['uid']
        sign = account['sign']
        tg_id = account['tg_id']

        user_lang = (await db.aiogram_data.find_one({'chat': tg_id}))['data'].get('locale') or 'en'

        servers = {
            'ru': 1030059902,
            'uk': 1030059902,
            'by': 1030059902,

            'en': 1030019902,
            'de': 1030039902,
            'fr': 1030049902,
            'es': 1030079902,
            'id': 1030099902,
            'it': 1030119902,
            'tr': 1030129902,
            'pt': 1030139902,
            'ar': 1030159902
        }

        puzzles_api = PuzzleApi(sign, uid, servers.get(user_lang) or 'en')
        ex = await puzzles_api.exchange(callback_data.item_id)

        if ex.get('error') == 2:
            await query.answer(_('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å'))
            old_log += f"\n{_('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')}"
            text, keyboard = await send_reward_message(
                tg_id, callback_data.account_id,
                callback_data.batch_size,
                0,
                f"{old_log}\n{_('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')}")
            await query.message.edit_text(text=text, reply_markup=keyboard)
            break
        else:
            await query.answer(ex['data']['msg'])
            old_log += f"\n{ex['data']['msg']}"

            text, keyboard = await send_reward_message(tg_id, callback_data.account_id, callback_data.batch_size,
                                                       ex['data']['puzzle_left'],
                                                       f"{old_log}\n{ex['data']['msg']}")
            await query.message.edit_text(text=text, reply_markup=keyboard)
