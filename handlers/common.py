import typing
from dataclasses import dataclass
from datetime import datetime

from aiogram import Router, F, html
from aiogram.dispatcher.filters.callback_data import CallbackData
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, CallbackQuery, InlineKeyboardButton
from aiogram.utils.i18n import lazy_gettext
from aiogram.utils.keyboard import KeyboardBuilder, ReplyKeyboardBuilder, InlineKeyboardBuilder
from babel.support import LazyProxy
from aiogram.utils.i18n import gettext as _

from commands import Commands, exit_keyboard
from settings import i18n_middleware, db
from states import BotStates


class LanguageCallback(CallbackData, prefix='lang'):
    lang: str


common_router = Router()


@common_router.message(F.text == Commands.CHANGE_LANGUAGE.name)
async def lang(message: Message):
    await message.answer(_('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –±–æ—Ç–∞'),
                         reply_markup=InlineKeyboardBuilder()
                         .button(text='üá¨üáß English', callback_data=LanguageCallback(lang='en'))
                         .button(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=LanguageCallback(lang='ru'))
                         .button(text='üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', callback_data=LanguageCallback(lang='uk'))

                         .button(text='üá´üá∑ Fran√ßais', callback_data=LanguageCallback(lang='fr'))
                         .button(text='üá©üá™ Deutsche', callback_data=LanguageCallback(lang='de'))
                         .button(text='üá™üá∏ Espa√±ol', callback_data=LanguageCallback(lang='es'))
                         .button(text='üá¶üá™ ÿπÿ±ÿ®Ÿä', callback_data=LanguageCallback(lang='ar'))

                         .button(text='üáÆüáπ Italiano', callback_data=LanguageCallback(lang='it'))
                         .button(text='üáπüá∑ T√ºrk√ße', callback_data=LanguageCallback(lang='tr'))
                         .button(text='üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è', callback_data=LanguageCallback(lang='be'))
                         .button(text='üáÆüá© Indon√©sie', callback_data=LanguageCallback(lang='id'))
                         .button(text='üáßüá∑ Portugu√™s (BR)', callback_data=LanguageCallback(lang='pt'))
                         .button(text='üáªüá≥ Ti·∫øng Vi·ªát', callback_data=LanguageCallback(lang='vi'))

                         .adjust(3)
                         .as_markup(),
                         )


@common_router.callback_query(LanguageCallback.filter(), state='*')
async def change_lang(query: CallbackQuery, state: FSMContext, callback_data: LanguageCallback, user):
    await i18n_middleware.set_locale(state, callback_data.lang)

    await start(query.message, state, user)

    await query.message.delete()
    await query.answer()


@common_router.callback_query(F.data == Commands.EXIT.callback_data, state='*')
async def go_to_main_menu(query: CallbackQuery, state: FSMContext, user):
    await state.set_state(None)
    await start(query.message, state, user)


@common_router.message(commands=['start', 'help'])
@common_router.message(F.text == Commands.EXIT.name)
async def start(message: Message, state: FSMContext, user):
    limits_string = ''

    puzzle_ranks = user['ranks'].get('1') or []

    total_puzzle_attempts = 0

    for rank in puzzle_ranks:
        if rank['id'] == 3 and rank['expires'] > datetime.now():
            total_puzzle_attempts += 30

    available_puzzle_attempts = total_puzzle_attempts
    if 'used_attempts' in user and 'puzzle' in user['used_attempts']:
        available_puzzle_attempts -= user['used_attempts']['puzzle']

    limits_string += _('{} / {} –ø–∞–∑–ª–æ–≤\n').format(max(0, available_puzzle_attempts), total_puzzle_attempts)

    await state.set_state(None)

    result_text = _(
        "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ</b>, <a href='tg://user?id={}'>{}</a>.\n–í–∞—à Telegram ID: <code>{}</code>\n\n<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ —É –í–∞—Å:</b>\n{} CastleCoin'–æ–≤\n") \
        .format(message.chat.id, html.quote(message.chat.first_name), message.chat.id, user.get('coins') or 0)
    if limits_string != '':
        result_text += limits_string
    result_text += _('\n‚Ä¢ @CCletsplay_bot ‚Äî <b>—Å–≤—è–∑—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.</b>'
                     '\n‚Ä¢ @letsplaycastleclash ‚Äî <b>–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –æ–± –∞–∫—Ü–∏—è—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö.</b>'
                     '\n‚Ä¢ letsplaycastleclash.com ‚Äî <b>—Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞.</b>')

    inline_kb_full = ReplyKeyboardBuilder().button(text=str(Commands.EVENT_PUZZLES.name)).button(
        text=str(Commands.EVENT_TRADER.name)) \
        .button(text=str(Commands.EVENT_TEAM.name)).button(text=str(Commands.EVENT_THANKSGIVING.name)) \
        .button(text=str(Commands.DONATE.name)).button(text=str(Commands.CHANGE_LANGUAGE.name)).adjust(2)

    await message.answer(result_text, reply_markup=inline_kb_full.as_markup(resize_keyboard=True))


def gen_donate_keyboard(user_lang):
    markup = ReplyKeyboardBuilder()

    for price in [10, 50, 100, 150, 200, 300, 500, 1000]:
        markup.button(text=_('{} CastleCoin - {} —Ä—É–±').format(price, price if user_lang == 'ru' else price // 2 ))

    markup.button(text=Commands.EXIT.name)

    return markup.adjust(2).as_markup(resize_keyboard=True)


@common_router.message(F.text == Commands.DONATE.name)
async def donate(message: Message, state: FSMContext):
    user_lang = (await db.aiogram_data.find_one({'chat': message.from_user.id}))['data'].get('locale') or 'ru'
    if user_lang in ['ru', 'uk']:
        await state.set_state(BotStates.donate)
        await message.reply(_('–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª: <b>–ö—É–ø–∏—Ç—å CastleCoin</b> \n\n'
                              '<b>–ö—É—Ä—Å:</b>\n'
                              '‚Ä¢ 1 CastleCoin = ‚ÇΩ1\n'
                              '‚Ä¢ 160 CastleCoin = ‚Ç¨2\n'
                              '‚Ä¢ 10 CastleCoin = ‚Ç¥5\n'
                              '‚Ä¢ 100 CastleCoin = ‚Ç¥50\n'
                              '‚Ä¢ 1 CastleCoin = <a href="https://google.com/search?q=1+—Ç–µ–Ω–≥–µ+–≤+—Ä—É–±">–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Ç∏</a>\n'
                              '‚Ä¢ 1 CastleCoin = <a href="https://google.com/search?q=1+BYN+–≤+—Ä—É–±"> –º–∞–Ω—ñ—Ç–æ—Ä—ã–Ω–≥ BYN</a>\n\n'
                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç–æ–º —Å–æ–±—ã—Ç–∏–π letsplaycastleclash.com/#price'),

                            reply_markup=gen_donate_keyboard(user_lang), disable_web_page_preview=True)
    else:
        await message.reply(_('''
–ï—Å–ª–∏ —É –í–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å CastleCoin'—ã –Ω–∞ —Å–∞–π—Ç–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:

‚Ä¢ –°–±–µ—Ä–±–∞–Ω–∫: <code>4276380220016518</code>
‚Ä¢ Tinkoff: <code>5536913939647661</code>
‚Ä¢ –í–¢–ë: <code>2200240467204455</code>
‚Ä¢ –ê–ª—å—Ñ–∞: <code>5559492516306829</code>
‚Ä¢ Monobank (–£–∫—Ä–∞–∏–Ω–∞): <code>4441114425412671</code>
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ <b>[–≤—Å–µ —Å—Ç—Ä–∞–Ω—ã]</b> <a href="https://t.me/letsplaycastleclash/3251"><b>@donate</b></a>

‚ùó–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞, <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @CCletsplay_bot —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –∏–Ω–∞—á–µ CastleCoin'—ã <b>–Ω–µ</b> –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á—ë—Ç.'''
), reply_markup=exit_keyboard, disable_web_page_preview=True)


@common_router.message(state=BotStates.donate)
async def donate(message: Message, state: FSMContext, user: dict):
    coin_count = message.text.split(' ', maxsplit=1)[0]
    if not coin_count.isdigit() or len(coin_count) > 5:
        await message.reply(_('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏ –≤–µ—Ä–Ω—É—é —Ü–µ–Ω—É!'), reply_markup=gen_donate_keyboard())
        return
    coin_count = int(coin_count)
    user_lang = (await db.aiogram_data.find_one({'chat': message.from_user.id}))['data'].get('locale') or 'ru'

    if not 2 <= coin_count <= 14999:
        return await message.reply(_('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏ –≤–µ—Ä–Ω—É—é —Ü–µ–Ω—É!'),
                                   reply_markup=gen_donate_keyboard(user_lang))

    text = _('''<b>–í—ã–±—Ä–∞–Ω–æ {} CastleCoin'–æ–≤ –∑–∞ {} —Ä—É–±–ª–µ–π</b>.

<a href="https://letsplaycastleclash.com/payment?tg_id={}&count={}"><b>–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –†–§ –∏ –£–∫—Ä–∞–∏–Ω—ã)</b></a>.

‚Ä¢ Monobank (–£–∫—Ä–∞–∏–Ω–∞): <code>4441114425412671</code>
–ï—Å–ª–∏ —É –í–∞—Å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å CastleCoin'—ã –Ω–∞ —Å–∞–π—Ç–µ, —É—Ç–æ—á–Ω—è–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @CCletsplay_bot. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –±–∞–ª–∞–Ω—Å.'''
             ).format(coin_count, coin_count if user_lang != 'uk' else coin_count // 2, message.chat.id, coin_count)
    await message.reply(text, reply_markup=exit_keyboard, disable_web_page_preview=True)
